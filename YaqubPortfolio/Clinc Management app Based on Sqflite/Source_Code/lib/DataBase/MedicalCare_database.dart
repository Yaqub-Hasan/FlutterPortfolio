import 'package:die_praxis_manegement/DataBase/model/patient.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class MedicalDataBase {
  static final MedicalDataBase instance = MedicalDataBase._init();

  static Database? _database;

  MedicalDataBase._init();

  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDB('medical.db');    //!dataBase name is not the same as table name
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, filePath);

    return await openDatabase(path, version: 1, onCreate: _CreateDB);
  }

  Future _CreateDB(Database db, int version) async {
    //Storage types for database:
    final idType = 'INTEGER PRIMARY KEY AUTOINCREMENT';
    final textType = 'TEXT NOT NULL';
    final boolType = 'BOOLEAN NOT NULL';
    final integerType = 'INTEGER NOT NULL';

    //Create Table
    await db.execute('''CREATE TABLE $table(
    ${PatientFields.id} $idType,
    ${PatientFields.age} $integerType,
    ${PatientFields.phoneNumber} $integerType,
    ${PatientFields.name} $textType,
    ${PatientFields.address} $textType,
    ${PatientFields.time} $textType,
    ${PatientFields.stomachachePainIntensity} $textType,
    ${PatientFields.weight} $textType,
    ${PatientFields.stomachache} $boolType,
    ${PatientFields.cough} $boolType,
    ${PatientFields.diarrhea} $boolType,
    ${PatientFields.fever} $boolType,
    ${PatientFields.vomiting} $boolType,
    ${PatientFields.jointPain} $boolType,
    ${PatientFields.intensity} $textType,
    ${PatientFields.profile} $textType   
    ) ''');
  }

  Future<Patient> create(Patient patient) async {
    final db = await instance.database;
    final id =await db.insert(table, patient.toJson() ); //Convert our note object to a json object and id is auto generated by DataBase
    return patient.copy(id:  id); //Pass the value we want to modify and here it is id
  }

  Future<Patient> readPatient(int id) async {
    final db = await instance.database;

    final maps = await db.query(table , //await is very important
        columns: PatientFields.values,
        //define which note we want to read:
        where: '${PatientFields.id} =  ?' , // we can replace ? with $id but it is not secure
        whereArgs: [id] // if we have multiple args we have to put a ? for each one inside (where)
    );

    if(maps.isNotEmpty){
      return Patient.fromJson(maps.first); //maps.first because we want to read only one note
    }

    else{
      throw Exception('ID $id not found');
    }
  }

  Future<List<Patient>> readAllPatients() async {

    final db = await instance.database;
    final TimeOrder = '${PatientFields.time} ASC';
    final result = await db.query(table , orderBy: TimeOrder);   //await is very important

    return result.map((json) => Patient.fromJson(json)).toList();

  }

  Future<int> update(Patient patient) async{
    final db = await instance.database;

    return db.update(
        table,
        patient.toJson(),
        //define which note we want to update
        where: '${PatientFields.id} = ?' ,
        whereArgs: [patient.id] //exactly like before
    );
  }

  Future<int> delete(int id) async{
    final db = await instance.database;

    return db.delete(
        table,
        //define which note we want to delete
        where: '${PatientFields.id} = ?' ,
        whereArgs: [id]
    );
  }


  Future Close() async {
    final db = await instance.database;
    db.close();
  }
}
